# -*- coding: utf-8 -*-
"""Orientacao a Objetos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aCIvk2nXmrhArRTCeRddRS0MUlTnGL6W

# Classes
"""

# Class

class Teste:
    pass

minha_classe = Teste()

print(type(minha_classe))

# Construtor eh um metodo padrao quando a classe eh instanciada

class Nossa_Classe:
    def __init__(self): # Construtor padrao
        print("Eu existo")

var = Nossa_Classe()

print(type(var))

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
        print('Pessoa com nome %s e idade %d criada' % (nome, idade))

pessoa1 = Pessoa('Marcelo', 33)
pessoa2 = Pessoa('Arthur', 0)

print(pessoa1.nome)

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
        print('Pessoa com nome %s e idade %d criada' % (nome, idade))

pessoa1 = Pessoa('Marcelo', 33)

pessoa1.nome = 'Arthur'

print(pessoa1.nome)

class Pessoa:
    especie = 'Homo Sapiens'
    num_pessoas = 0
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
        Pessoa.num_pessoas += 1

pessoa1 = Pessoa('Marcelo', 33)        
pessoa2 = Pessoa('Arthur', 0)
pessoa3 = Pessoa('Jully', 31)

print(pessoa1.especie)
print(pessoa2.especie)

print(Pessoa.num_pessoas)

"""# Funcoes de Classes"""

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    def print_nome(self):
        print('Meu nome eh %s ' % (self.nome))

pessoa1 = Pessoa('Marcelo', '34')                
pessoa2 = Pessoa('Arthur', '0') 

pessoa1.print_nome()
pessoa2.print_nome()

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    def print_string(self,nome):
        print('Meu nome eh %s ' % (nome))
    def print_nome(self):
        self.print_string(self.nome)

pessoa1 = Pessoa('Marcelo', '34')                
pessoa2 = Pessoa('Arthur', '0') 

pessoa1.print_nome()
pessoa2.print_nome()

class Pessoa:
    def __init__(self, nome):
        self.nome = nome
    def insere_idade(self, idade):
        self.idade = idade

marcelo = Pessoa('Marcelo')
marcelo.insere_idade(33)

print(marcelo.idade)

# Classes com uma Classe como atributo

class Tipo1:
    def __init__(self, outra_classe):
        self.outra_classe = outra_classe

class Tipo2:
    numero = 10


class2 = Tipo2
class1 = Tipo1(class2)

print(class1.outra_classe.numero)

class Exemplo:
    def __init__(self):
        pass

lista = []        

ex1 = Exemplo()
ex2 = Exemplo()

lista.append(ex1)
lista.append(ex2)

print(lista[1])

"""# Herenca"""

class FormaGeometrica:
    def __init__(self,altura,largura):
        self.altura = altura
        self.largura = largura

class Quadrado(FormaGeometrica):
    pass

class Triangulo(FormaGeometrica):
    pass  

quadrado = Quadrado(100,50)    
triangulo = Triangulo(10,30)

print(quadrado.altura)
print(triangulo.largura)

class FormaGeometrica:
    def __init__(self,altura,largura):
        self.altura = altura
        self.largura = largura

class Quadrado(FormaGeometrica):
    lado = 10

class Triangulo(FormaGeometrica):
    angulo = 30

quadrado = Quadrado(100,50)    
triangulo = Triangulo(10,45)

print(quadrado.altura)
print(quadrado.lado)
print(triangulo.largura)
print(triangulo.angulo)

class FormaGeometrica:
    def __init__(self,altura,largura):
        self.altura = altura
        self.largura = largura
    def funcao_herdada(self):
        print('Sou herdada')

class Quadrado(FormaGeometrica):
    pass

class Triangulo(FormaGeometrica):
    pass  

quadrado = Quadrado(100,50)    
triangulo = Triangulo(10,30)

print(quadrado.altura)
quadrado.funcao_herdada()
print(triangulo.largura)
triangulo.funcao_herdada()

# Overrides: Sobreposicao de funcoes

class ClassePai:
    def __init__(self):
        print("Sou a classe pai")

class ClasseFilha1(ClassePai):
    def __init__(self):
        print('Sou a classe filha 1')

class ClasseFilha2(ClassePai):
    def __init__(self):
        print('Sou a classe filha 2')

pai = ClassePai()
filha1 = ClasseFilha1()        
filha2 = ClasseFilha2()

class FormaGeometrica:
    def __init__(self, altura, largura):
        self.altura = altura
        self.largura = largura

class Quadrado(FormaGeometrica):
    def __init__(self, altura, largura, atributo_quadrado):
        FormaGeometrica.__init__(self, altura, largura)
        self.atributo_quadrado = atributo_quadrado

class Triangulo(FormaGeometrica):
    def __init__(self, altura, largura, atributo_triangulo):
        FormaGeometrica.__init__(self, altura, largura)
        self.atributo_triangulo = atributo_triangulo

quadrado = Quadrado(100,200,'quadrado')
triangulo = Triangulo(200,300,'triagulo')

print(quadrado.altura)
print(quadrado.atributo_quadrado)

print(triangulo.altura)
print(triangulo.atributo_triangulo)

# Heranca Multipla

class Base1:
    def __init__(self, atributo1):
        self.atributo1 = atributo1
    def Base1_print(self):
        print('Base1')

class Base2:
    def __init__(self, atributo2):
        self.atributo2 = atributo2
    def Base2_print(self):
        print('Base2')

class MinhaClasse(Base1, Base2):
    def __init__(self):
        Base1.__init__(self,10)
        Base2.__init__(self,20)

var = MinhaClasse()        

print(var.atributo1)
print(var.atributo2)

var.Base1_print()
var.Base2_print()

"""# Modificadores de Acesso"""

class Segredo:
    def __init__(self):
        self.__segredo = 'senha123'

senha = Segredo()
print(seg.__erro) # Gera erro, pois quando temos __* fica inacessivel

class Segredo:
    def __init__(self):
        self.__segredo = 'senha123'
    def __printa_segredo(self):
        print(self.__segredo)
    def printa_segredo(self):
        self.__printa_segredo()
    

senha = Segredo()
senha.printa_segredo()
# senha.__printa_segredo() # gera erro

class Pessoa:
    def __init__(self, nome):
        self.__nome = nome

    def get_nome(self):
        print('Pega o nome')
        return self.__nome
        
    def set_nome(self, nome):
        if len(nome) > 0:
            print('Setando o nome')
            self.__nome = nome


    nome = property(get_nome, set_nome)

pess = Pessoa('Maria')
print(pess.nome)

pess.nome = "Marcos"
print(pess.nome)

class Pessoa:
    def __init__(self, nome):
        self.__nome = nome

    def get_nome(self):
        print('Pega o nome')
        return self.__nome
        
    def set_nome(self, nome):
        if len(nome) > 0:
            print('Setando o nome')
            self.__nome = nome


    nome = property(fset = set_nome) # fset, fget, fdel

pess = Pessoa('Maria')
pess.nome = "Marcos"

class Natural:
    def __init__(self, numero):
        self.__numero = numero
    @property
    def numero(self):
        print('pegando numero')
        return self.__numero
    @numero.setter
    def numero(self,value):
        if value >= 0:
            self.__numero = value
            print('setando numero para ', value)


numero = Natural(10)

numero.numero = -20

print(numero.numero)

class Pessoa:
    def __init__(self, nome):
        self.__nome = nome
    @property
    def nome(self):
        return self.__nome.capitalize()
    @nome.setter
    def nome(self, value):
        if (len(value) != 0):
            self.__nome = value

pessoa = Pessoa('marcelo')
print(pessoa.nome)
pessoa.nome = 'arthur'
print(pessoa.nome)
pessoa.nome = ''
print(pessoa.nome)

"""# Metodos Estaticos"""

class Teste:
    def __init__(self, gasolina):
        pass

    @classmethod
    def class_method(cls):
        print(cls)
    @staticmethod
    def static_method():
        print('static method')

Teste.class_method()
Teste.static_method()

testando = Teste('aditivada')

testando.class_method()

class Veiculo:
    def __init__(self, nome, gasolina, potencia):
        self.nome = nome
        self.gasolina = gasolina
        self.potencia = potencia
        
    @classmethod
    def cria_carro(cls):
        return cls('carro', 'comum',200)
    @classmethod
    def cria_trator(cls):
        return cls('trator', 'aditivada',500)

veiculo1 = Veiculo.cria_carro()
veiculo2 = Veiculo.cria_trator()

print(veiculo1.nome)
print(veiculo1.gasolina)
print(veiculo1.potencia)
print(veiculo2.nome)
print(veiculo2.gasolina)
print(veiculo2.potencia)

class Veiculo:
    __numero_veiculos = 0
    def __init__(self, nome, gasolina, potencia):
        self.nome = nome
        self.gasolina = gasolina
        self.potencia = potencia
        Veiculo.__numero_veiculos += 1
    @staticmethod
    def get_numero_carros():
        return Veiculo.__numero_veiculos

carro1 = Veiculo('carro','aditivida','200')
carro2 = Veiculo('caminhao','aditivida','1000')
carro2 = Veiculo('trator','comum','500')

print(Veiculo.get_numero_carros())

"""# Copia por Valor e Referencia"""

lst1 = 10
lst2 = lst1
lst2 = 20

print(lst1)

lst1 = [1,2,3]
lst2 = lst1
lst2.append(40)

print(lst1)

class Classe:
    def __init__(self):
        self.num = 10

class1 = Classe()
class2 = class1

class1.num = 20

print(class2.num)

from copy import copy
lst1 = [1,2,3]
lst2 = copy(lst1)
lst2.append(40)

print(lst1)
print(lst2)

# Deletando objetos

numero = 10
del numero
print(numero)

arr = [1,2,3]

del arr[0]

print(arr)

# Testando tipos

eh_inteiro = isinstance(5,int)
print(eh_inteiro )

class Base:
    def __init__(self):
        pass

class Herdeiro(Base):
    def __init__(self):
        pass


classe = Herdeiro()

eh_base = isinstance(classe, Base)
eh_herdeiro = isinstance(classe, Herdeiro)

print(eh_base)
print(eh_herdeiro)

def soma(num1,num2):
    if isinstance(num1, (int,float)) and isinstance(num2, (int, float)):
        return num1 + num2
    else:
        return None

print(soma(1,2.33))
print(soma(True, 'Text'))

"""# Uso de With

"""

class Lista:
    def __init__(self):
        pass
    def __enter__(self):
        print('Memoria iniciada')
        self.lista = [i for i in range(0,10)]
        return self.lista
    def __exit__(self, *args, **kwargs):
        print('Memoria liberada')
        del self.lista

with Lista() as temp_lista:
    for i in temp_lista:
        print(i)

print("Aqui o objeto nao existe mais")

"""# Sobrecarga de Operadores"""

class MeuNumero:
    def __init__(self, numero):
        self.numero = numero
    def __add__(self, outro):
        return self.numero + outro.numero

num1 = MeuNumero(10)        
num2 = MeuNumero(20.5)      

print(num1 + num2)

"""# Exercicios"""

'''
1 - Crie uma classe para representar um carro. Ele deve ter um atributo 
que diga sua potência em cavalos. Outro atributo deve dizer quanto de 
gasolina por quilômetros ele consome. Cria duas instâncias e mostre os 
valores.

Exemplo saída
Potência do carro 1: 100 cavalos
Alcance do carro 1: 200 km/l
Potência do carro 2: 200 cavalos
Alcance do carro 2: 350.5
'''
class Carro:
    def __init__(self, potencia, alcance):
        self.potencia = potencia
        self.alcance = alcance

carro1 = Carro(100, 200)
carro2 = Carro(200, 350)

print('Potencia do carro 1: ', carro1.potencia, ' cavalos')
print('Alcance do carro 1: ', carro1.alcance, ' km/l')

'''
2 - Cria uma classe que represente uma pessoa. Ela deve possuir um 
nome, CPF e um dependente, onde o dependente é outra pessoa. 
Dependente não é obrigatório. Crie duas instâncias: pai e filho, e imprima 
as saídas.

Exemplo saída:
Nome: Rodrigo CPF: 200.300.400-45 Dependente: None
Nome: Fernando CPF: 100.200.300-45 Dependente: Rodrigo
'''

class Pessoa():
    def __init__(self, nome, cpf, dependente=None):
        self.nome = nome
        self.cpf = cpf
        self.dependente = dependente

filho = Pessoa('Arthur','200.300.400-45')
pai = Pessoa('Marcelo','300.500.600-85', filho)

print('Nome:', filho.nome, ' CPF:', filho.cpf, ' Dependente:', filho.dependente)
print('Nome:', pai.nome, ' CPF:', pai.cpf, ' Dependente:', pai.dependente.nome)

'''
3 - Crie uma classe base que represente um veículo. Os atributos devem 
ser peso do veiculo, número de rodas e potência. Em seguida crie três 
classes que herdam esse veículo: ônibus, carro e moto. Crie uma instância 
de cada tipo e imprima as instâncias

Ônibus: Peso 1000 Potência 400 Rodas 6
Carro: Peso 300 Potência 100 Rodas 4
Moto: Peso 100 Potência 50 Rodas 2
'''

class Veiculo():
    def __init__(self, peso, potencia, rodas):
        self.peso = peso
        self.potencia = potencia
        self.rodas = rodas

class Moto(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)


class Carro(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)

class Onibus(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)

moto = Moto('100','125','2')
carro = Carro('2000','1000','4')
onibus = Onibus('3000','1500','8')

print('Moto:', moto.peso, 'Potencia:', moto.potencia, 'Rodas:', moto.rodas)
print('Carro:', carro.peso, 'Potencia:', carro.potencia, 'Rodas:', carro.rodas)
print('Onibus:', onibus.peso, 'Potencia:', onibus.potencia, 'Rodas:', onibus.rodas)

'''
4 - Baseado no exercício anterior, cria uma função na classe base que diga 
a distância percorrida. Vamos supor que esse valor é dado pela peso do 
veículo dividido pela potência do veículo vezes mil. Crie uma moto, carro e 
um ônibus. Mostre esses valores.
Ex: (200 cavalos/ 400 cavalos) * 1000 = 500 quilômetros
Exemplo saída:

Distância percorrida ônibus: 2500.0
Distância percorrida carro: 3000.0
Distância percorrida moto: 2000.0
'''

class Veiculo():
    def __init__(self, peso, potencia, rodas):
        self.peso = peso
        self.potencia = potencia
        self.rodas = rodas
    def distancia_percorrida(self):
        return (self.potencia / self.peso) * 1000

class Moto(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)


class Carro(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)

class Onibus(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)

moto = Moto(100,50,2)
carro = Carro(300,100,4)
onibus = Onibus(1000,400,6)

print('Distancia percorrida moto:', moto.distancia_percorrida())
print('Distancia percorrida carro:', carro.distancia_percorrida())
print('Distancia percorrida onibus:', onibus.distancia_percorrida())

'''
5 - Baseado no exercício anterior, crie os operador '>' e '<' para dizer qual veículo 
é mais potente. Compare um de cada tipo.
Observação, sobrescreva os métodos __lt__ e __gt__
'''

class Veiculo():
    def __init__(self, peso, potencia, rodas):
        self.peso = peso
        self.potencia = potencia
        self.rodas = rodas
    def __lt__(self, outro):
        return self.potencia > outro.potencia
    def __gt__(self,outro):
        return self.potencia < outro.potencia

class Moto(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)


class Carro(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)

class Onibus(Veiculo):
    def __init__(self, peso, potencia, rodas):
        Veiculo.__init__(self, peso, potencia, rodas)

moto = Moto(100,50,2)
carro = Carro(300,100,4)
onibus = Onibus(1000,400,6)

print(onibus > carro)
print(onibus < moto)
print(moto > carro)

'''
6 - Cria uma classe que represente um número negativo, use propriedades 
(@property) para controlar o valor guardado pela classe, sem deixar que ele 
fique positivo (0 pode). Além disso crie alguns operadores para comparação e de 
subtração. Cuide para que nenhum valor positivo surja.
'''
class NumeroNegativo:
    def __init__(self, numero):
        self.__numero = 0
        self.numero = numero
    @property
    def numero(self):
        return self.__numero
    @numero.setter
    def numero(self, value):
        if value <= 0:
            self.__numero = value
    def __lt__(self, outro):
        return self.__numero < outro.__numero
    def __gt__(self, outro):
        return self.numero > outro.__numero
    def __sub__(self, outro):
        sub = self.__numero - outro.__numero
        if sub > 0:
            sub = 0
        return sub

num1 = NumeroNegativo(-10)
num2 = NumeroNegativo(-20)
num3 = NumeroNegativo(20)

print(num1.numero, num2.numero, num3.numero)
print(num1 > num2)
print(num1 - num2)

'''
7 - Cria uma função que diga se um objeto é um primitivo do Python, informando 
que é sempre passado valor Ex: [int, float, str, bool], ou se é um objeto passado 
por referência
'''

def testa_objeto(obj):
    if isinstance(obj,(int, float,str, bool)):
        print('Objeto por valor')
    else:
        print('Objeto por referencia')

class Objetos:
    def __init__(self):
        pass
    
obj = Objetos()
valor  = 3

testa_objeto(obj)
testa_objeto(valor)