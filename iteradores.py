# -*- coding: utf-8 -*-
"""iteradores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C0Iphk1yfC5BeM5wXD3fHAvOh9Q9zM7Z

# Iteradores
"""

lista = [1,2,3,4]

iterador = iter(lista)

next(iterador)
next(iterador)
next(iterador)
next(iterador)

print(type(iterador))

lista = [1,2,3,4]

iterador = iter(lista)

next(iterador)
next(iterador)
next(iterador)
next(iterador)
next(iterador) # Posicao nao existe no iterador --> Erro de execucao

lista = [1,2,3,4]

for item in lista:
    print(item)

print(1 in lista)    
print(1 not in lista)

class ColecaoNumeros:
    def __init__(self, numero_max):
        self.max = numero_max
    def __iter__(self):
        self.numero_atual = 0
        return self
    
    def __next__(self):
        if self.numero_atual <= self.max:
            retorno = self.numero_atual
            self.numero_atual += 1
            return retorno
        else:
            raise StopIteration

colecao = ColecaoNumeros(6)     

for item in colecao:
    print(item)

print(2 in colecao)

# Generator

def ancora():
    yield 1
    yield 2
    yield 3

for item in ancora():
    print(item)

print(10 in ancora())
print(2 in ancora())

func = ancora()

print(next(func))
print(next(func))
print(next(func))

def meu_range(num):
    local_num = 0
    while local_num < num:
        yield local_num
        local_num += 1

for i in meu_range(10):
    print(i)

# Enumerate

lista = ['a','b','c']

for indice, valor in enumerate(lista):
    print(indice, valor)

lista = ['a','b','c']

for item in enumerate(lista):
    print(item)

def anos():
    yield '2000'
    yield '2001'
    yield '2002'
    yield '2003'
    yield '2004'
    yield '2005'

for indice, valor in enumerate(anos()):
    print(indice, valor)

for indice, valor in enumerate(range(0,20,4)):
    print(indice, valor)

# Unpacking de Iteradores

produtos = [
    ['carro', '200.000'],
    ['cadeira', '1.000'],
    ['moto', '33.000'],
    ['geladeira', '2.000'],
    ['armario','1.500']
]

for produto, valor in produtos:
    print(produto, valor)

def gen1():
    yield [1,2]
    yield [3,4]
    yield [5,6]

for x,y in gen1():
    print(x,y)

def gen1():
    yield 1
    yield 2
    yield 3

def gen2():
    for i in gen1():
        yield i, 'a'
        yield i, 'b'
        yield i, 'c'

for x, y in gen2():
    print(x, y)

# Join de iteradores

texto1 = 'Ola'

print('#'.join(texto1))

lista = ['a','b','c','d']

letras = ' '.join(lista)

print(letras)

letras = ' - '.join(lista)

print(letras)

letras = '-'.join([str(i) for i in range(10)])

print(letras)

def anos():
    for i in range(2020, 2030):
        yield str(i)

letras = '-'.join(anos())

print(letras)

# Tratando Erros

lista = [1,2,3]

interador = iter(lista)

while(True):
    try:
        print(next(interador))
    except:
        break;

"""## Exercicios"""

# 1 - Crie uma funcao iteravel 'meses' que retorne meses.

def meses():
    meses = ['jan','fev','mar','abr','mai','jun','jul','ago','set','out','nov','dez']

    for i in meses:
        yield i


for mes in meses():
    print(mes)

# 2 - Cria um funcao iteravel que receba uma lista de numeros e que retorne
# a cada iteracao um item dessa lista multiplicado por dois

def multiplica_lista(lista):
    for i in lista:
        yield i * 2

numeros = [1,2,3,4,5]

for i in multiplica_lista(numeros):
    print(i)

# 3 - Crie uma classe iteravel chamada 'Tabuada' que calcule a tabuada de multiplicao do numero recebido
# pelo construtor

class Tabuada():
    def __init__(self, num):
        self.num = num
    def __iter__(self)    :
        self.atual = 0
        return self
    def __next__(self):
        self.atual += 1
        if(self.atual == 11)       :
            raise StopIteration
        return self.atual * self.num

tabuado_calc = Tabuada(2)

for i in tabuado_calc:
    print(i)

# 4 -

def meses_enum():
    meses = ['jan','fev','mar','abr','mai','jun','jul','ago','set','out','nov','dez']

    for i in enumerate(meses):
        yield i

for indice, mes in meses_enum():
    print(indice + 1, mes)

# 5 - 

def frase(lista):
    return '. '.join(lista) + '.'

textos = ['Ola, sou o Marcelo', 'Gosto de Python', 'Futuro Engenheiro de Dados']

print(frase(textos))