# -*- coding: utf-8 -*-
"""Functions_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iepA2DvcW0GvtriGMcbZ-rsJrYdCzvI5

# Functions

# Functions
"""

def func(*args, outro):
    print("Argumentos sao: ", args)
    print(outro)

func(1,2,3, outro="1")

def subtrai(num1,num2):
    valor = num1 - num2
    return valor

subtracao = subtrai(10,3)

print(subtracao)

def len_int(num):
    numero_em_texto = str(num)
    return len(numero_em_texto)

num1 = 10
num2 = 1230

tamanho1 = len_int(num1)
tamanho2 = len_int(num2)

print("O numero %d tem %d digitos" % (num1, tamanho1))
print("O numero %d tem %d digitos" % (num2, tamanho2))

def retorna_multiplo(a,b,c):
    a += a
    b += b
    c += c
    return a,b,c

x,y,z = retorna_multiplo(1,2,3)
print(x,y,z)

"""---

# Funcao Lambda
"""

faz_soma = lambda x : x + 10

valor = faz_soma(2)

print(valor)

multiplica = lambda x,y : x * y
valor = multiplica(2,10)
print(valor)

def multiplica(y):
    return lambda x : x * y 

valor = multiplica(2)

resultado = valor(10)

print(resultado)

"""# Funcao Recursivas"""

def print_num(num):
    print(num)
    if num >= 10:
        return
    print_num(num +1)

print_num(0)

def print_str(texto, indice):
    if indice == len(texto):
        return
    print(texto[indice])
    print_str(texto, indice + 1)

print_str("Python", 0)

def fatorial(num):
    if(num==1):
        return 1
    
    return num * fatorial(num-1)

print(fatorial(10))

"""# Funcao Aninhadas"""

def calculadora(num1,num2,op):
    def soma(a,b):
        return a + b
    def subtracao(a,b):
        return a - b
    def multiplicacao(a,b):
        return a * b
    def divisao(a,b):
        return a / b
    
    if (op == '+'):
        return soma(num1, num2)
    elif (op == '-'):
        return subtracao(num1, num2)
    elif (op == '*'):
        return multiplicacao(num1, num2)
    elif (op == '/'):
        return divisao(num1, num2)
    else:
        print("Operacao invalida")

mais = calculadora(10,5,'+')
menos = calculadora(10,5,'-')        
vezes = calculadora(10,5,'*')        
dividi = calculadora(10,5,'/')        

print(mais)
print(menos)
print(vezes)
print(dividi)

def pega_func_print():
    def print_var(var):
        print(var)
    return print_var

print_me = pega_func_print()

print_me(10)

"""# Decorators"""

def deixa_maiusculo(func):
    def inner_func():
        return func().upper()
    return inner_func

@deixa_maiusculo
def retorna_string():
    return "string de teste em maiusculo"

valor = retorna_string()

print(valor)

def deixa_maiusculo(func):
    def inner_func(str1,str2):
        return func(str1,str2).upper()
    return inner_func

@deixa_maiusculo
def concat_string(str1,str2):
    return str1 + str2

valor = concat_string('marcelo',' ribas')

print(valor)

def DeixaMauisculo(func):
    def inner_func(texto):
        return func(texto).upper()
    return inner_func

def InsereParenteses(func):
    def inner_func(texto):
        return '(' + func(texto) + ')'
    return inner_func

# Decorators
@DeixaMauisculo
@InsereParenteses
def formata_string(texto):
    return texto


print(formata_string('Ola este texto sera formatado'))

"""# Exercicios"""

# 1 - Crie uma função chamada “e_negativo” que receba um número, retorna um booleano “True” 
# se o número for negativo, caso contrário retorna “False”.

def eh_negativo(num):
      return num < 0
  
teste_num = eh_negativo(-10)

print(teste_num)

# 2 - Crie um função que receba um array de números (int ou float) e retorne sua soma.

def soma_array(arr):
    soma = 0
    for i in arr:
        soma += i
    return soma

resultado = soma_array([1,2,3])

print(resultado)

# 3 - Crie um função que receba uma string e que conte e retorne o número de vogais desta string

def conta_vogais(texto):
    vogais = 0
    arr_vogais = ('a','e','i','o','u')
    for i in texto:
        if i in arr_vogais:
            vogais += 1
    return vogais

count = conta_vogais('kjfasdifujpoiwrjpoianfvpneptunpungbv;dsjfn;bkajhsfduiashdfjiajshdflkjriuoqwytioqupojgnafm,nvas,mdhfklashaei')

print(count)

# 4 - Crie um função que retorne o último caractere de um string recebida.
def ultimo_caracter(palavra):
    return palavra[len(palavra)-1]

resultado = ultimo_caracter('Python')

print(resultado)

# 5 - Crie um função que receba uma lista de elementos e um valor qualquer. 
# Em seguida retorne um booleano dizendo se o valor foi encontrado ou não na lista.

def encontra(array, item):
    for i in array:
        if (i == item):
            return True
    return False

arr = [1,'3','Marcelo',1.5, True]       

print(encontra(arr,'abc'))
print(encontra(arr,1))
print(encontra(arr,True))
print(encontra(arr,False))

# 6 - Crie um função que receba uma lista de elementos e um valor qualquer. Em 
# seguida retorne um booleano dizendo se o valor foi encontrado ou não e também 
# a posição onde foi encontrado.

def encontra_index(arr, item):
    for i in range(0, len(arr)):
        if (arr[i] == item):
            return True, i
    return False, -1

arr = [10,'3','Marcelo',1.5, True, 'abc']       

print(encontra_index(arr,'abc'))
print(encontra_index(arr,10))
print(encontra_index(arr,True))
print(encontra_index(arr,False))

# 7 - Crie uma função que recebe um número arbitrário de parâmetros. Em seguida 
# diga qual o tipo de cada parâmetro
def mostra_tipo(*args):
    for i in args:
        print(type(i))

mostra_tipo(1,2,3.4,'text',True)

# 8 - Crie uma função que receba um string, mas que possua um decorator para 
# transforma-la em uma citação, ou seja você deve retornas strings entre aspas 
# duplas, além disso transforme todos os caracteres para minúscula usando a 
# função lower()

def citacao(func):
    def inner_func(texto):
        return func(texto).lower()
    return inner_func

def insere_aspas(func):
    def inner_func(texto):
        return '"' + func(texto) + '"'
    return inner_func

# Decorators
@citacao
@insere_aspas
def formata_string(texto):
    return texto


print('E disse Marcelo: ;', formata_string('Vou APRenDER PyTHoN'))

# 9 -  Cria uma função recursiva que itere os números de 0 até 10 e printe o 
# resultado de sua divisão inteira com o número três.

def prita_div_3(num):
    if (num == 11):
        return
    print(num // 3)
    prita_div_3(num + 1)

prita_div_3(0)